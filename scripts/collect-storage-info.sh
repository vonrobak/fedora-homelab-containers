#!/usr/bin/env bash
# ------------------------------------------------------------------------------
# collect-storage-info.sh
#
# Minimal, neat storage survey for a Fedora homelab using LUKS + BTRFS + Podman.
# Gathers current state so we can reconcile documentation and propose updates.
#
# Usage:
#   sudo ./collect-storage-info.sh [POOL_MOUNT]
#   # Default POOL_MOUNT is /mnt/btrfs-pool
#
# Output:
#   Creates ./storage-survey-<ISO8601>/ with multiple text files + README.
#
# Notes:
#   - Designed to be safe: no secrets collected; UUIDs lightly redacted.
#   - Commands that may not exist are skipped gracefully.
#   - Run with sudo for best coverage (btrfs, cryptsetup, smartctl).
# ------------------------------------------------------------------------------

set -euo pipefail

# ----- Config -----------------------------------------------------------------
POOL_MNT="${1:-/mnt/btrfs-pool}"

# Timestamped output directory
TS="$(date -u +"%Y-%m-%dT%H-%M-%SZ")"
OUTDIR="storage-survey-${TS}"
mkdir -p "${OUTDIR}"

# A simple banner to make each section readable in the combined report
banner() {
  local title="$1"
  printf "\n\n===== %s =====\n" "$title"
}

# Light redaction of long UUID-like strings (keeps first 8 chars for correlation)
# This targets typical UUIDs (8-4-4-4-12) and long hex strings.
redact() {
  sed -E \
    -e 's/\b([0-9a-fA-F]{8})(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}\b/\1-REDACTED/g' \
    -e 's/\b([0-9a-fA-F]{8})([0-9a-fA-F-]{16,})\b/\1REDACTED/g'
}

# Run a command if present; write stdout+stderr to a file (redacted)
run_cmd() {
  local label="$1"; shift
  local outfile="${OUTDIR}/${label}.txt"
  if command -v "${1%% *}" >/dev/null 2>&1; then
    {
      banner "$label"
      echo "\$ $*"
      # shellcheck disable=SC2068
      $@ 2>&1 | redact
    } > "${outfile}" || true
  else
    {
      banner "$label"
      echo "SKIP: command not found for: $*"
    } > "${outfile}"
  fi
}

# Quick write helper for small files
write_file() {
  local label="$1"; shift
  local outfile="${OUTDIR}/${label}.txt"
  {
    banner "$label"
    cat
  } > "${outfile}"
}

# ----- README -----------------------------------------------------------------
write_file "README" <<EOF
Storage Survey (${TS})

This folder contains a snapshot of storage/network/container facts from the host.
Sensitive identifiers (UUIDs) are lightly redacted. Review before sharing.

Key:
- pool mount path: ${POOL_MNT}
- generated by: $(basename "$0")
- run as user: $(id -un) (uid=$(id -u)), sudo=$([ "$(id -u)" -eq 0 ] && echo yes || echo no)

Files:
- btrfs-*              → pool/system BTRFS state
- mounts-* & fstab     → current mount options
- disks-* & smart-*    → block devices + S.M.A.R.T. summaries
- cryptsetup-*         → LUKS mapping status (no secrets)
- podman-*             → running containers & networks
- snapshots-*          → snapshot trees (where detectable)

You can safely remove this folder after we reconcile documentation.
EOF

# ----- Host basics -------------------------------------------------------------
write_file "host-basics" <<EOF
Hostname : $(hostnamectl --static 2>/dev/null || hostname)
OS       : $(grep -E '^PRETTY_NAME=' /etc/os-release | cut -d= -f2 | tr -d '"')
Kernel   : $(uname -r)
SELinux  : $(getenforce 2>/dev/null || echo "unknown")
Date UTC : $(date -u +"%Y-%m-%d %H:%M:%SZ")
EOF

# ----- Disks & Filesystems ----------------------------------------------------
run_cmd "disks-lsblk"            lsblk -o NAME,SIZE,TYPE,MOUNTPOINT,LABEL,UUID,FSTYPE
run_cmd "disks-blkid"            blkid
run_cmd "mounts-all"             mount
run_cmd "fstab"                  sh -c 'grep -vE "^\s*#|^\s*$" /etc/fstab || true'

# ----- BTRFS: pool and system -------------------------------------------------
run_cmd "btrfs-filesystem-show"  btrfs filesystem show
run_cmd "btrfs-usage-pool"       btrfs fi usage -T "${POOL_MNT}"
run_cmd "btrfs-df-pool"          btrfs filesystem df "${POOL_MNT}"
run_cmd "btrfs-device-stats"     btrfs device stats "${POOL_MNT}"
run_cmd "btrfs-balance-status"   btrfs balance status "${POOL_MNT}"
run_cmd "btrfs-scrub-status"     btrfs scrub status "${POOL_MNT}"
run_cmd "btrfs-subvol-list-pool" btrfs subvolume list -p "${POOL_MNT}"

# Root/SSD side (best-effort; these may be subvolumes under '/')
run_cmd "btrfs-usage-root"       btrfs fi usage -T /
run_cmd "btrfs-subvol-list-root" btrfs subvolume list -p /

# Quotas & qgroups (pool)
run_cmd "btrfs-quota-show"       btrfs quota show "${POOL_MNT}"
run_cmd "btrfs-qgroup-show"      sh -c "btrfs qgroup show -reF '${POOL_MNT}' | head -200"

# Snapshot tree discovery (lightweight)
run_cmd "snapshots-find-pool"    sh -c "find '${POOL_MNT}' -maxdepth 3 -type d -name '.snapshots' 2>/dev/null"
run_cmd "snapshots-root"         sh -c "btrfs subvolume list -p / | grep -i snap || true"

# ----- LUKS (non-sensitive summary) -------------------------------------------
# We avoid dumping full headers; only show mapping status and basic crypt params.
run_cmd "cryptsetup-status"      sh -c "for m in /dev/mapper/*; do echo '---' \$m; cryptsetup status \$m; done"

# ----- Podman containers & networks -------------------------------------------
run_cmd "podman-ps"              podman ps --format '{{.Names}}\t{{.Image}}\t{{.Networks}}'
run_cmd "podman-network-ls"      podman network ls
run_cmd "podman-volumes"         podman volume ls

# ----- SMART (quick summaries) -------------------------------------------------
if command -v smartctl >/dev/null 2>&1; then
  write_file "smart-scan" < <(smartctl --scan)
  # Attempt to summarize a few common disk nodes
  while read -r DEV _; do
    BASENAME="$(basename "$DEV")"
    run_cmd "smart-${BASENAME}" smartctl -A "$DEV"
  done < <(smartctl --scan | awk '{print $1}')
else
  write_file "smart-scan" <<EOF
smartctl not found; skipping S.M.A.R.T. collection.
Install: sudo dnf install smartmontools
EOF
fi

# ----- Pool mount sanity check -------------------------------------------------
write_file "pool-sanity" <<EOF
Requested pool mount : ${POOL_MNT}
Exists & is btrfs    : $( [ -d "${POOL_MNT}" ] && findmnt -n -o FSTYPE "${POOL_MNT}" 2>/dev/null | grep -qi btrfs && echo yes || echo no )
EOF

# ----- Combined (safe consolidated view) --------------------------------------
# Build into a temp file, exclude the final _ALL.txt itself, then move atomically.
COMBINED="${OUTDIR}/_ALL.txt"
TMP_COMBINED="${OUTDIR}/._ALL.tmp"

{
  shopt -s nullglob
  for f in "${OUTDIR}"/*.txt; do
    [ "$(basename "$f")" = "_ALL.txt" ] && continue
    echo "###############################################################################"
    echo "# File: $(basename "$f")"
    echo "###############################################################################"
    cat "$f"
    echo
  done
} > "${TMP_COMBINED}"

mv -f "${TMP_COMBINED}" "${COMBINED}"

echo "✅ Storage survey complete."
echo "   Output folder:  ${OUTDIR}"
echo "   Quick view:     ${COMBINED}"
